{"ast":null,"code":"const URL=\"https://todo.tandrei.com:8080/api\";const sendUserNamePasswordForm=async _ref=>{let{username,password,isLogin}=_ref;const response=fetch(URL+'/'+(isLogin?'authenticate':'register'),{mode:'cors',method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:username,password:password})});const data=await response.then(async res=>{if(res.ok){if(isLogin){return res.json();}else return res.text();}else{let err_text=await res.text();throw new Error(err_text);}});sessionStorage.setItem('token',data.token);sessionStorage.setItem('username',username);return data;};const addActivity=async activity_description=>{const response=fetch(URL+'/toDo/add',{mode:'cors',method:'POST',//give token to server to authenticate as BEARER token\nheaders:{'Authorization':'Bearer '+sessionStorage.getItem('token'),'Content-Type':'application/json'},body:JSON.stringify({description:activity_description})});//activity obj contains id, description, and status=false\nconst activity=await response.then(async res=>{if(res.ok){return res.json();}else{let err_text=await res.text();throw new Error(err_text);}});return activity;};const seeAllActivities=async()=>{const response=fetch(URL+'/toDo/seeAll',{mode:'cors',method:'GET',//give token to server to authenticate as BEARER token\nheaders:{'Authorization':'Bearer '+sessionStorage.getItem('token')}});console.log(sessionStorage.getItem('token'));const activities=await response.then(async res=>{if(res.ok){return res.json();}else{let err_text=await res.text();throw new Error(err_text);}});return activities;};const deleteActivity=async activity_id=>{const response=fetch(\"\".concat(URL,\"/toDo/deleteActivity/\").concat(activity_id),{mode:'cors',method:'DELETE',//give token to server to authenticate as BEARER token\nheaders:{'Authorization':'Bearer '+sessionStorage.getItem('token'),'Content-Type':'application/json'}});const activity_deleted=response.then(async res=>{if(res.ok){return res.json();}else{let err_text=await res.text();throw new Error(err_text);}});return activity_deleted;};const checkActivity=async activity_id=>{const response=fetch(\"\".concat(URL,\"/toDo/checkActivity/\").concat(activity_id),{mode:'cors',method:'POST',//give token to server to authenticate as BEARER token\nheaders:{'Authorization':'Bearer '+sessionStorage.getItem('token'),'Content-Type':'application/json'}});const activity_checked=response.then(async res=>{if(res.ok){return res.json();}else{let err_text=await res.text();throw new Error(err_text);}});return activity_checked;};const ApiClient={sendUserNamePasswordForm,addActivity,seeAllActivities,deleteActivity,checkActivity};export default ApiClient;","map":{"version":3,"names":["URL","sendUserNamePasswordForm","_ref","username","password","isLogin","response","fetch","mode","method","headers","body","JSON","stringify","name","data","then","res","ok","json","text","err_text","Error","sessionStorage","setItem","token","addActivity","activity_description","getItem","description","activity","seeAllActivities","console","log","activities","deleteActivity","activity_id","concat","activity_deleted","checkActivity","activity_checked","ApiClient"],"sources":["/Users/tudorandrei/repos/ToDoListApp-abatrineanu/Client/src/api/ApiClient.js"],"sourcesContent":["const URL = \"https://todo.tandrei.com:8080/api\";\r\n\r\nconst sendUserNamePasswordForm = \r\n    async ({username, password, isLogin}) => {\r\n    \r\n        const response = fetch(URL + '/' + (isLogin ? 'authenticate' : 'register'), {\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                name: username,\r\n                password: password,\r\n            })\r\n        });\r\n\r\n        const data = await response.then(async (res) => {\r\n            if(res.ok) {\r\n                if (isLogin) {\r\n                    return res.json();\r\n                }\r\n                else \r\n                    return res.text();\r\n            }\r\n            else {\r\n                let err_text = await res.text();\r\n                throw new Error(err_text);\r\n            }\r\n        });\r\n\r\n        sessionStorage.setItem('token', data.token);\r\n        sessionStorage.setItem('username', username);\r\n        return data;\r\n    }\r\n\r\nconst addActivity = \r\n    async (activity_description) => {\r\n\r\n        const response = fetch(URL + '/toDo/add', {\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            //give token to server to authenticate as BEARER token\r\n            headers: {'Authorization': 'Bearer ' + sessionStorage.getItem('token'), 'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                description: activity_description,\r\n            })\r\n        });\r\n        \r\n        //activity obj contains id, description, and status=false\r\n        const activity = await response.then(async (res) => {\r\n            if(res.ok) {\r\n                return res.json();\r\n            }\r\n            else {\r\n                let err_text = await res.text();\r\n                throw new Error(err_text);\r\n            }\r\n        });\r\n\r\n        return activity;\r\n    }\r\n\r\nconst seeAllActivities = \r\n    async () => {\r\n        const response = fetch(URL + '/toDo/seeAll', {\r\n            mode: 'cors',\r\n            method: 'GET',\r\n            //give token to server to authenticate as BEARER token\r\n            headers: {'Authorization': 'Bearer ' + sessionStorage.getItem('token')},\r\n        });\r\n        console.log(sessionStorage.getItem('token'));\r\n        const activities = await response.then(async (res) => {\r\n            if(res.ok) {\r\n                return res.json();\r\n            }\r\n            else {\r\n                let err_text = await res.text();\r\n                throw new Error(err_text);\r\n            }\r\n        });\r\n\r\n        return activities;\r\n    }\r\n\r\nconst deleteActivity = \r\n    async (activity_id) => {\r\n        const response = fetch(`${URL}/toDo/deleteActivity/${activity_id}`, {\r\n            mode: 'cors',\r\n            method: 'DELETE',\r\n            //give token to server to authenticate as BEARER token\r\n            headers: {'Authorization': 'Bearer ' + sessionStorage.getItem('token'), 'Content-Type': 'application/json'},\r\n        });\r\n\r\n        const activity_deleted = response.then(async (res) => {\r\n            if(res.ok) {\r\n                return res.json();\r\n            }\r\n            else {\r\n                let err_text = await res.text();\r\n                throw new Error(err_text);\r\n            }\r\n        });\r\n\r\n        return activity_deleted;\r\n    }\r\n\r\nconst checkActivity =\r\n    async (activity_id) => {\r\n        const response = fetch(`${URL}/toDo/checkActivity/${activity_id}`, {\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            //give token to server to authenticate as BEARER token\r\n            headers: {'Authorization': 'Bearer ' + sessionStorage.getItem('token'), 'Content-Type': 'application/json'},\r\n        });\r\n\r\n        const activity_checked = response.then(async (res) => {\r\n            if(res.ok) {\r\n                return res.json();\r\n            }\r\n            else {\r\n                let err_text = await res.text();\r\n                throw new Error(err_text);\r\n            }\r\n        });\r\n\r\n        return activity_checked;\r\n    }\r\n\r\n\r\nconst ApiClient = {\r\n    sendUserNamePasswordForm,\r\n    addActivity,\r\n    seeAllActivities,\r\n    deleteActivity,\r\n    checkActivity,\r\n};\r\n\r\nexport default ApiClient;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}